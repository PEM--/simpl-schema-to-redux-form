(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('moize'), require('react'), require('dot-object')) :
	typeof define === 'function' && define.amd ? define(['exports', 'moize', 'react', 'dot-object'], factory) :
	(factory((global['simpl-schema-to-redux-form'] = {}),global.moize,global.React,global.dot));
}(this, (function (exports,moize,React,dot) { 'use strict';

moize = moize && moize.hasOwnProperty('default') ? moize['default'] : moize;
React = React && React.hasOwnProperty('default') ? React['default'] : React;
dot = dot && dot.hasOwnProperty('default') ? dot['default'] : dot;

var asyncGenerator = function () {
  function AwaitValue(value) {
    this.value = value;
  }

  function AsyncGenerator(gen) {
    var front, back;

    function send(key, arg) {
      return new Promise(function (resolve, reject) {
        var request = {
          key: key,
          arg: arg,
          resolve: resolve,
          reject: reject,
          next: null
        };

        if (back) {
          back = back.next = request;
        } else {
          front = back = request;
          resume(key, arg);
        }
      });
    }

    function resume(key, arg) {
      try {
        var result = gen[key](arg);
        var value = result.value;

        if (value instanceof AwaitValue) {
          Promise.resolve(value.value).then(function (arg) {
            resume("next", arg);
          }, function (arg) {
            resume("throw", arg);
          });
        } else {
          settle(result.done ? "return" : "normal", result.value);
        }
      } catch (err) {
        settle("throw", err);
      }
    }

    function settle(type, value) {
      switch (type) {
        case "return":
          front.resolve({
            value: value,
            done: true
          });
          break;

        case "throw":
          front.reject(value);
          break;

        default:
          front.resolve({
            value: value,
            done: false
          });
          break;
      }

      front = front.next;

      if (front) {
        resume(front.key, front.arg);
      } else {
        back = null;
      }
    }

    this._invoke = send;

    if (typeof gen.return !== "function") {
      this.return = undefined;
    }
  }

  if (typeof Symbol === "function" && Symbol.asyncIterator) {
    AsyncGenerator.prototype[Symbol.asyncIterator] = function () {
      return this;
    };
  }

  AsyncGenerator.prototype.next = function (arg) {
    return this._invoke("next", arg);
  };

  AsyncGenerator.prototype.throw = function (arg) {
    return this._invoke("throw", arg);
  };

  AsyncGenerator.prototype.return = function (arg) {
    return this._invoke("return", arg);
  };

  return {
    wrap: function (fn) {
      return function () {
        return new AsyncGenerator(fn.apply(this, arguments));
      };
    },
    await: function (value) {
      return new AwaitValue(value);
    }
  };
}();





var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};







var defineProperty = function (obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];

    for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }

  return target;
};

var Autoform = function Autoform(options) {
  var _this = this;

  classCallCheck(this, Autoform);

  this.options = _extends({
    defaultComponent: React.DOM.input
  }, options);
  this.modelKeys = moize(function () {
    var formFields = _this.options.formFields;

    var fieldGroups = Object.keys(formFields);
    var modelKeys = fieldGroups.reduce(function (acc, key) {
      return acc.concat(Object.keys(formFields[key].fieldGroup));
    }, []);
    return modelKeys;
  }, { maxArgs: 0 });
};

var simpleSchemaToReduxFormValidator = function simpleSchemaToReduxFormValidator(ctx, logger) {
  var func = function func(values) {
    ctx.validate(values);
    if (ctx.isValid()) return {};
    var ssErrors = ctx.validationErrors();
    var rfRes = ssErrors.reduce(function (acc, ssError) {
      // Avoid taking into account multiple errors on one field, takes only the first
      if (acc[ssError.name]) return acc;
      var ssMsg = ctx.keyErrorMessage(ssError.name);
      return _extends({}, acc, defineProperty({}, ssError.name, ssMsg));
    }, {});
    func.values = values;
    func.errors = rfRes;
    if (logger) {
      logger.log('simpleSchemaToReduxFormValidator', { values: func.values, errors: func.errors });
    }
    return dot.object(rfRes);
  };
  func.values = null;
  func.errors = null;
  return func;
};

exports.Autoform = Autoform;
exports.simpleSchemaToReduxFormValidator = simpleSchemaToReduxFormValidator;

Object.defineProperty(exports, '__esModule', { value: true });

})));
