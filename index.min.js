(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('simpl-schema'), require('dot-object')) :
	typeof define === 'function' && define.amd ? define(['exports', 'simpl-schema', 'dot-object'], factory) :
	(factory((global['simpl-schema-to-redux-form'] = {}),global.SimpleSchema,global.dot));
}(this, (function (exports,SimpleSchema,dot) { 'use strict';

SimpleSchema = SimpleSchema && SimpleSchema.hasOwnProperty('default') ? SimpleSchema['default'] : SimpleSchema;
dot = dot && dot.hasOwnProperty('default') ? dot['default'] : dot;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

SimpleSchema.setDefaultMessages({
  initialLanguage: 'en',
  messages: {
    en: {
      required: () => ({ id: 'forms.required' })
    }
  }
});

const schema = new SimpleSchema({
  testNumber: { type: Number },
  testString: { type: String },
  testObject: { type: Object },
  'testObject.string': { type: String },
  'testObject.number': { type: Number },
  testArray: { type: Array },
  'testArray.$': { type: Object },
  'testArray.$.string': { type: String },
  'testArray.$.number': { type: Number }
});

const ctx = schema.newContext();

const simpleSchemaToReduxFormValidator = (schema, ctx) => values => {
  ctx.validate(values);
  if (ctx.isValid()) return {};
  const ssErrors = ctx.validationErrors();
  const rfRes = ssErrors.reduce((acc, ssError) => {
    // Avoid taking into account multiple errors on one field, takes only the first
    if (acc[ssError.name]) return acc;
    const ssMsg = ctx.keyErrorMessage(ssError.name);
    return _extends({}, acc, { [ssError.name]: ssMsg });
  }, {});
  return dot.object(rfRes);
};

const validator = simpleSchemaToReduxFormValidator(schema, ctx);
const res = validator({
  testString: 'Test',
  testObject: { string: '', number: 0 },
  testArray: [{ string: '', number: 0 }, { string: '' }]
});
console.log(JSON.stringify(res));

exports.simpleSchemaToReduxFormValidator = simpleSchemaToReduxFormValidator;

Object.defineProperty(exports, '__esModule', { value: true });

})));
